openapi: 3.0.3
info:
  title: ProCat
  description: |-
    OpenAPI documentation for ProCat application
  version: 1.0.0
servers:
  - url: 'localhost:8080'
paths:
  /users:
    get:
      tags:
        - user
      summary: to get all users
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
  /users/{userId}:
    get:
      tags:
        - user
      summary: for simple user only for his page
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of user that needs to be fetched
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - admin
      summary: only for admin
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of user that needs to be fetched
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    type: string
                    example: ""
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found

  /users/sign-in:
    post:
      tags:
        - user
      summary: phoneNumber + password
      parameters:
        - name: phoneNumber
          in: query
          description: The user phone number for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    $ref: '#/components/schemas/User'

  /users/sign-up:
    post:
      tags:
        - user
      summary: fullName + phoneNumber + password
      parameters:
        - name: fullName
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: phoneNumber
          in: query
          description: The user phone number for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    $ref: '#/components/schemas/User'

#  /users/verification/send:
#  /users//verification/check:
  /users/verification/iin:
    post:
      tags:
        - verification
      parameters:
        - name: code
          in: query
          required: true
          description: code for verification
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    type: string
                    example: ""
  /users/change/iin-bin:
    post:
      tags:
        - userSettings
      summary: check on iin correctness and matching with full name
      parameters:
        - name: iin-bin
          in: query
          required: true
          description: new iin-bin
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    $ref: '#/components/schemas/User'

  /users/change/fullname:
    post:
      tags:
        - userSettings
      summary: if success, then iin-bin := null, and it's needed to be filled
      parameters:
        - name: fullName
          in: query
          required: true
          description: new full name
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    $ref: '#/components/schemas/User'
  /users/change/password:
    post:
      tags:
        - userSettings
      summary: check if old passwords match, then send confirmation code on current number
      parameters:
        - name: oldPassword
          in: query
          required: true
          description: old password
          schema:
            type: string
        - name: newPassword
          in: query
          required: true
          description: new password
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    $ref: '#/components/schemas/User'

  /users/change/phone:
    post:
      tags:
        - userSettings
      summary: check password and send confirmation code on new number
      parameters:
        - name: phone
          in: query
          required: true
          description: new phone
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    $ref: '#/components/schemas/User'
  /users/change/email:
    post:
      tags:
        - userSettings
      summary: check password and send confirmation code on new email
      parameters:
        - name: email
          in: query
          required: true
          description: new email
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    $ref: '#/components/schemas/User'
  /users/change/role/{userId}:
    patch:
      tags:
        - admin
      summary: change role
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: role
          in: query
          required: true
          description: new role
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    $ref: '#/components/schemas/User'
  /users/deliverymen:
    get:
      tags:
        - delivery
      summary: get all deliverymen
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeliveryMan'
  /users/deliverymen/{deliveryId}:
    get:
      tags:
        - delivery
      summary: for simple user to get his deliveryman page
      parameters:
        - name: deliveryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    $ref: '#/components/schemas/DeliveryMan'
    patch:
      tags:
        - delivery
      summary: change data
      parameters:
        - name: deliveryId
          in: path
          required: true
          schema:
            type: integer
        - name: newDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    $ref: '#/components/schemas/Delivery'
    delete:
      tags:
        - admin
      summary: to delete deliveryman
      parameters:
        - name: deliveryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    type: string
                    example: ""
  /users/deliverymen/{userId}:
    post:
      tags:
        - admin
      summary: create new deliveryman
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    type: string
                    example: ""
  /users/deliverymen/deliveries:
    get:
      tags:
        - delivery
      summary: get list of all his deliveries
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Delivery'
  /users/deliverymen/deliveries/{deliveryId}:
    get:
      tags:
        - delivery
      summary: get delivery
      parameters:
        - name: deliveryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    $ref: '#/components/schemas/Delivery'
    patch:
      tags:
        - delivery
      summary: change status
      parameters:
        - name: deliveryId
          in: path
          required: true
          schema:
            type: integer
        - name: newStatus
          in: query
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    $ref: '#/components/schemas/Delivery'
  /users/deliverymen/deliveries/create-route:
    post:
      tags:
        - delivery
      summary: build a route from deliveryman's deliveries
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Delivery'
  /users/admin/deliveries-to-sort:
    get:
      tags:
        - admin
      summary: GET all deliveries that are needed to be sorted
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Delivery'
  /users/admin/change-delivery:
    patch:
      tags:
        - admin
      summary: change status of corresponding order of the delivery and maybe change deliveryman to it
      parameters:
        - name: orderId
          in: query
          required: true
          schema:
            type: integer
        - name: newStatus
          in: query
          required: true
          schema:
            type: string
        - name: newDeliveryMen
          in: query
          required: false
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    $ref: '#/components/schemas/Delivery'
  /users/cart:
    get:
      tags:
        - cart
      summary: get items from the cart
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    $ref: '#/components/schemas/Cart'
    post:
      tags:
        - cart
      summary: adds item with {itemId} with probably {count} to authorized user with {usedId}
      parameters:
        - name: item
          in: query
          required: true
          description: new item
          schema:
            type: integer
        - name: count
          in: query
          required: false
          description: count
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    type: string
                    example: ""
    delete:
      tags:
        - cart
      summary: decreases item (with {itemId}) number in cart by one or totally deletes item from the cart
      parameters:
        - name: itemId
          in: query
          required: true
          description: item id
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    type: string
                    example: ""
  /users/orders:
    get:
      tags:
        - order
      summary: get all orders for current user
      parameters:
        - name: status
          in: query
          required: false
          description: filter by status
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
    post:
      tags:
        - order
      summary: creates new order and transfer all items from cart to this order
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    type: string
                    example: ""
  /users/orders/{orderId}:
    get:
      tags:
        - order
      summary: get current order
      parameters:
        - name: orderId
          in: path
          required: true
          description: order id
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    $ref: '#/components/schemas/Order'

#  /users/orders/cancel/{orderId}:
#  /users/orders/payment{orderId}:
#  /users/subscriptions:
#  /users/subscriptions/{subscriptionId}:
#  /users/notifications:
#  /users/notifications/{userId}:
#  /users/notifications/{notificationId}:
#
#  /categories/{categoryId}:
#  /categories/route/{categoryId}:

  /items:
    get:
      tags:
        - items
      summary: get all items
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: categoryId
          in: query
          required: false
          schema:
            type: integer
        - name: stock
          in: query
          required: false
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Item'

  /items/{itemId}:
    get:
      tags:
        - items
      summary: get one item
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "200"
                  message:
                    type: string
                    example: ""
                  payload:
                    $ref: '#/components/schemas/Item'

#  /items/stock/{itemId}:
#  /items/infos/{itemId}:
#  /items/images/{itemId}:
#
#  /stores:
#  /stores/{storeId}:

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 848
        fullName:
          type: string
          example: Вадимов Вадим Вадимович
        email:
          type: string
          example: vadim@mail.ru
        phone_number:
          type: string
          example: +79856523652
        identification_number:
          type: string
          example: 3256328745698
        password_hash:
          type: string
          example: pAsSwOrDhAsH
        is_confirmed:
          type: boolean
          example: true
        role:
          type: string
          example: user
        created_at:
          type: string
          format: date-time
          example: 2023-10-19 10:23:54+03

    DeliveryMan:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 125
        car_capacity:
          type: string
          example: 4?
        working_hours_start:
          type: string
          format: time
          example: 08:00
        working_hours_end:
          type: string
          format: time
          example: 16:00
        car_id:
          type: string
          example: P425YB154
        user_id:
          type: integer
          format: int64
          example: 848

    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 526
        status:
          type: string
          example: delivering
        total_price:
          type: integer
          example: 5000
        rental_period_start:
          type: string
          format: date-time
          example: 2023-10-19
        rental_period_end:
          type: string
          format: date-time
          example: 2023-11-04
        address:
          type: string
          example: ул. Пушкина д. 7 кв. 587
        latitude:
          type: string
          example: 55.042779
        longitude:
          type: string
          example: 82.994966
        company_name:
          type: string
          example: Строим с радостью
        user_id:
          type: integer
          format: int64
          example: 848

    Verification:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 985
        code:
          type: string
          example: 586ed5
        type:
          type: string
          example: password
        value:
          type: string
          example: 2358694
        life_time:
          type: string
          format: time
          example: 00:05:00
        user_id:
          type: string
          example: 848

    Delivery:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 523
        time_start:
          type: string
          format: date-time
          example: 2023-10-19 10:00:00+03
        time_end:
          type: string
          format: date-time
          example: 2023-10-19 12:00:00+03
        method:
          type: string
          example: car
        order_id:
          type: integer
          format: int64
          example: 526
        delivery_man_id:
          type: integer
          format: int64
          example: 125
        order:
          $ref: '#/components/schemas/Order'

    Payment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 5686
        is_paid:
          type: boolean
          example: true
        method:
          type: string
          example: cash?
        price:
          type: integer
          example: 5000
        created_at:
          type: string
          format: date-time
          example: 2023-10-19 10:00:00+03
        order_id:
          type: integer
          format: int64
          example: 268

    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 85
        name:
          type: string
          example: Категория
        parent_id:
          type: integer
          format: int64
          example: 52

    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 852
        name:
          type: string
          example: Молток
        description:
          type: string
          example: Качественный, крепкий, удобный очень
        price:
          type: integer
          example: 3000
        is_in_stock:
          type: boolean
          example: true
        category_id:
          type: integer
          format: int64
          example: 58
        images:
          type: array
          items:
            $ref: '#/components/schemas/ItemImage'
        infos:
          type: array
          items:
            $ref: '#/components/schemas/Info'
        stocks:
          type: array
          items:
            $ref: '#/components/schemas/ItemStock'


    Store:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 852
        name:
          type: string
        address:
          type: string
          example: ул. Пушкина д. 7 кв. 587
        latitude:
          type: string
          example: 55.042779
        longitude:
          type: string
          example: 82.994966
        working_hours_start:
          type: string
          format: time
          example: 08:00
        working_hours_end:
          type: string
          format: time
          example: 16:00

    ItemStock:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 259
        in_stock_number:
          type: integer
          example: 5
        store_id:
          type: integer
          format: int64
          example: 2
        item_id:
          type: integer
          format: int64
          example: 863

    ItemImage:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 248
        image:
          type: string
          example: tool.jpg?
        item_id:
          type: integer
          format: int64
          example: 255

    OrderItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 752
        items_number:
          type: integer
          example: 1
        order_id:
          type: integer
          format: int64
          example: 52
        item_id:
          type: integer
          format: int64
          example: 271

    Info:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 785
        name:
          type: string
          example: Вес
        description:
          type: string
          example: 12 кг
        item_id:
          type: integer
          format: int64
          example: 856

    Cart:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 852
        user_id:
          type: integer
          format: int64
          example: 848
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'

    CartItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 963
        items_number:
          type: integer
          example: 4
        cart_id:
          type: integer
          format: int64
          example: 863
        item_id:
          type: integer
          format: int64
          example: 852

    Subscription:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 822
        user_id:
          type: integer
          format: int64
          example: 856

    SubscriptionItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 7889
        subscription_id:
          type: integer
          format: int64
          example: 698
        item_id:
          type: integer
          format: int64
          example: 852

    Notification:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 536
        title:
          type: string
          example: Новое сообщение
        description:
          type: string
          example: Заходите скорее почитайте
        is_viewed:
          type: boolean
          example: false
        created_at:
          format: date-time
          example: 2023-10-19 12:00:00+03
        user_id:
          type: integer
          format: int64
          example: 869

    Chat:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        is_solved:
          type: boolean
        created_at:
          format: date-time
          example: 2023-10-19 12:00:00+03
        first_user_id:
          type: integer
          format: int64
        second_user_id:
          type: integer
          format: int64
        order_id:
          type: integer
          format: int64

    Message:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 852
        text:
          type: string
          example: Инструменты продаете?
        created_at:
          type: string
          format: date-time
          example: 2023-10-19 12:00:00+03
        user_id:
          type: integer
          format: int64
          example: 848
        chat_id:
          type: integer
          format: int64
          example: 456

    MessageImage:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 74885
        image:
          type: string
          example: pic.jpg?
        message_id:
          type: integer
          format: int64
          example: 7556

  
