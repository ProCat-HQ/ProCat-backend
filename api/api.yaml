openapi: 3.0.3
info:
  title: ProCat
  description: |-
    OpenAPI documentation for ProCat application
  version: 1.0.0
servers:
  - url: 'localhost:8080'
paths:
  /users:
    get:
      tags:
        - admin
      summary: to get all users
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            example: 50
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 2
        - name: role
          in: query
          required: false
          schema:
            type: string
            example: user
            enum:
              - user
              - deliveryman
              - moderator
              - admin
        - name: isConfirmed
          in: query
          required: false
          schema:
            type: boolean
            example: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      count:
                        type: integer
                        example: 122
                      rows:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      tags:
        - user
      summary: for simple user only for his page
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of user that needs to be fetched, user's id must equal to {userId}
          schema:
            type: integer
            example: 848
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    $ref: '#/components/schemas/User'
        400:
          description: Invalid ID supplied
        404:
          description: User not found

    delete:
      tags:
        - admin
      summary: only for admin
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of user that needs to be fetched
          schema:
            type: integer
            example: 848
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
        400:
          description: Invalid ID supplied
        404:
          description: User not found

  /users/sign-in:
    post:
      tags:
        - user
      summary: phoneNumber + password
      parameters:
        - name: phoneNumber
          in: query
          description: The user phone number for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

  /users/sign-up:
    post:
      tags:
        - user
      summary: fullName + phoneNumber + password
      parameters:
        - name: fullName
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: phoneNumber
          in: query
          description: The user phone number for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 856

  /users/verification/send:
    post:
      tags:
        - verification
      summary: creates new verification code for certain user and his existing info with {type}
      parameters:
        - name: type
          in: query
          description: type of data for verification
          required: true
          schema:
            type: string
            example: password
            enum:
              - password
              - phone
              - email
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""

  /users//verification/check:
    post:
      tags:
        - verification
      summary: checks whether code matches or not + check on lifetime of code if all is well then update user info, otherwise - user can try again if code lifetime is still available
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
            example: 123sda
        - name: type
          in: query
          description: type of data for verification
          required: true
          schema:
            type: string
            example: password
            enum:
              - password
              - phone
              - email
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /users/verification/iin:
    post:
      tags:
        - verification
      summary: additional endpoint, because this functionality will be used in {users/orders/POST} handler
      parameters:
        - name: code
          in: query
          required: true
          description: code for verification
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /users/change/iin-bin:
    post:
      tags:
        - userSettings
      summary: check on iin correctness and matching with full name
      parameters:
        - name: password
          in: query
          required: true
          schema:
            type: string
            example: "12365478"
        - name: iin-bin
          in: query
          required: true
          description: new iin-bin
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""

  /users/change/fullname:
    post:
      tags:
        - userSettings
      summary: if success, then iin-bin := null, and it's needed to be filled
      parameters:
        - name: password
          in: query
          required: true
          schema:
            type: string
            example: "12365478"
        - name: fullName
          in: query
          required: true
          description: new full name
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /users/change/password:
    post:
      tags:
        - userSettings
      summary: check if old passwords match, then send confirmation code on current number
      parameters:
        - name: oldPassword
          in: query
          required: true
          schema:
            type: string
            example: "12365478"
        - name: newPassword
          in: query
          required: true
          description: new password
          schema:
            type: string

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""

  /users/change/phone:
    post:
      tags:
        - userSettings
      summary: check password and send confirmation code on new number
      parameters:
        - name: password
          in: query
          required: true
          schema:
            type: string
            example: "12365478"
        - name: phone
          in: query
          required: true
          description: new phone
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /users/change/email:
    post:
      tags:
        - userSettings
      summary: check password and send confirmation code on new email
      parameters:
        - name: password
          in: query
          required: true
          schema:
            type: string
            example: "12365478"
        - name: email
          in: query
          required: true
          description: new email
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /users/change/role/{userId}:
    patch:
      tags:
        - admin
      summary: change role
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: role
          in: query
          required: true
          description: new role
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /users/deliverymen:
    get:
      tags:
        - delivery
      summary: get all deliverymen
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            example: 10
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      count:
                        type: integer
                        example: 4
                      rows:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              format: int64
                              example: 125
                            car_capacity:
                              type: string
                              example: 4?
                            working_hours_start:
                              type: string
                              format: time
                              example: 08:00
                            working_hours_end:
                              type: string
                              format: time
                              example: 16:00
                            car_id:
                              type: string
                              example: P425YB154
                            fullName:
                              type: string
                              example: Иванов Иван Иванович
                            email:
                              type: string
                              example: pochta@gmail.com
                            phoneNumber:
                              type: string
                              example: +79163125366
  /users/deliverymen/{deliveryId}:
    get:
      tags:
        - delivery
      summary: for simple user to get his deliveryman page
      parameters:
        - name: deliveryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      carCapacity:
                        type: string
                        example: big
                      workingHoursStart:
                        type: string
                        example: 08:00
                      workingHoursEnd:
                        type: string
                        example: 16:00
                      carId:
                        type: string
                        example: P425YB154
  /users/deliverymen/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          example: 856
    post:
      tags:
        - admin
        - delivery
      summary: create new deliveryman
      parameters:
        - name: carCapacity
          in: query
          required: true
          schema:
            type: string
            example: big
        - name: workingHoursStart
          in: query
          required: true
          schema:
            type: string
            example: 8:00
        - name: workingHoursEnd
          in: query
          required: true
          schema:
            type: string
            example: 16:00
        - name: carId
          in: query
          required: true
          schema:
            type: string
            example: HT236O154
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 533
    patch:
      tags:
        - admin
      summary: to change data
      parameters:
        - name: carCapacity
          in: query
          required: false
          schema:
            type: string
            example: big
        - name: workingHoursStart
          in: query
          required: false
          schema:
            type: string
            example: 8:00
        - name: workingHoursEnd
          in: query
          required: false
          schema:
            type: string
            example: 16:00
        - name: carId
          in: query
          required: false
          schema:
            type: string
            example: HT236O154
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /users/deliverymen/{deliverymanId}:
    delete:
      tags:
        - admin
      summary: to delete deliveryman
      parameters:
        - name: deliverymanId
          in: path
          required: true
          schema:
            type: integer
            example: 858
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /users/deliverymen/deliveries:
    get:
      tags:
        - delivery
      summary: get list of all his deliveries
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            example: 4
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 4
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      count:
                        type: integer
                        example: 12
                      rows:
                        type: array
                        items:
                          $ref: '#/components/schemas/Delivery'
  /users/deliverymen/deliveries/{deliverymanId}:
    get:
      tags:
        - delivery
      summary: GET - to get all deliveries for {deliverymanId}
      parameters:
        - name: deliverymanId
          in: path
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            example: 15
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 2
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      count:
                        type: integer
                        example: 12
                      rows:
                        type: array
                        items:
                          $ref: '#/components/schemas/Delivery'
  /users/deliverymen/deliveries/{deliveryId}:
    patch:
      tags:
        - delivery
      summary: change status
      parameters:
        - name: deliveryId
          in: path
          required: true
          schema:
            type: integer
        - name: newStatus
          in: query
          required: true
          schema:
            type: string
            example: delivered
            enum:
              - pendingConfirmation
              - pendingRejected
              - rejected
              - needsRevision
              - awaitingPayment
              - accepted
              - readyToDelivery
              - delivering
              - readyForPickup
              - received
              - closed
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /users/deliverymen/deliveries/create-route:
    post:
      tags:
        - delivery
      summary: build a route from deliveryman's deliveries
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      points:
                        type: array
                        items:
                          properties:
                            orderId:
                              type: integer
                              example: 45
                            lat:
                              type: string
                              example: 54.99770587584445
                            lon:
                              type: string
                              example: 82.79502868652345
  /users/admin/cluster:
    post:
      tags:
        - admin
      summary: make clustering orders for deliveryman
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      result:
                        type: array
                        items:
                          properties:
                            deliverymanId:
                              type: integer
                              example: 456
                            deliveries:
                              type: array
                              items:
                                properties:
                                  latitude:
                                    type: string
                                    example: 55.072470687600536
                                  longitude:
                                    type: string
                                    example: 83.04634094238281
                                  deliveryId:
                                    type: integer
                                    example: 45

  /users/admin/deliveries-to-sort:
    get:
      tags:
        - admin
      summary: GET all deliveries that are needed to be sorted
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      result:
                        type: array
                        items:
                          properties:
                            deliverymanId:
                              type: integer
                              example: 456
                            deliveries:
                              type: array
                              items:
                                properties:
                                  latitude:
                                    type: string
                                    example: 55.072470687600536
                                  longitude:
                                    type: string
                                    example: 83.04634094238281
  /users/admin/change-delivery:
    patch:
      tags:
        - admin
      summary: change status of corresponding order of the delivery and maybe change deliveryman to it
      parameters:
        - name: deliveryId
          in: query
          required: true
          schema:
            type: integer
        - name: deliveryMan
          in: query
          required: false
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /users/cart:
    get:
      tags:
        - cart
      summary: get items from the cart
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/ItemMini'
    post:
      tags:
        - cart
      summary: adds item with {itemId} with probably {count} to authorized user with {usedId}
      parameters:
        - name: itemID
          in: query
          required: true
          description: new item
          schema:
            type: integer
            example: 32
        - name: count
          in: query
          required: false
          description: count
          schema:
            type: integer
            example: 2
            default: 1
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
    delete:
      tags:
        - cart
      summary: decreases item (with {itemId}) number in cart by one or totally deletes item from the cart
      parameters:
        - name: itemId
          in: query
          required: true
          description: item id
          schema:
            type: integer
            example: 31
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /users/orders:
    get:
      tags:
        - order
      summary: get all orders for current user
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: userId
          in: query
          required: false
          schema:
            type: integer
        - name: status
          in: query
          required: false
          description: filter by status
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      count:
                        type: integer
                        example: 45
                      rows:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
  /users/orders/{orderId}:
    parameters:
      - name: orderId
        in: path
        required: true
        description: order id
        schema:
          type: integer
    get:
      tags:
        - order
      summary: get current order
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    $ref: '#/components/schemas/Order'
    post:
      tags:
        - order
      summary: creates new order and transfer all items from cart to this order
      parameters:
        - name: rentalPeriodStart
          in: query
          required: true
          description: order id
          schema:
            type: string
            example: 2023-10-19 20:30:00+03
        - name: rentalPeriodEnd
          in: query
          required: true
          description: order id
          schema:
            type: string
            example: 2023-10-27 20:30:00+03
        - name: address
          in: query
          required: true
          description: order id
          schema:
            type: string
            example: ул. Пушкина д. 7 кв. 587
        - name: companyName
          in: query
          required: false
          description: order id
          schema:
            type: string
            example: SOME COMP INC.
        - name: deliveryMethod
          in: query
          required: true
          description: order id
          schema:
            type: string
            example: by car
        - name: deliveryTimeStart
          in: query
          required: false
          description: order id
          schema:
            type: string
            example: 2023-10-18 18:00:00+03
        - name: deliveryTimeEnd
          in: query
          required: false
          description: order id
          schema:
            type: string
            example: 2023-10-18 20:00:00+03
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      orderId:
                        type: integer
                        example: 45

  /users/orders/cancel/{orderId}:
    post:
      tags:
        - orders
      summary: set status to "pending rejected", waits till admin do some stuff and then set status of order to "rejected"
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            example: 54
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /users/status/{orderId}:
    parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: integer
          example: 542
    patch:
      tags:
        - admin
      summary: for ADMIN to change status
      parameters:
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum:
              - pendingConfirmation
              - pendingRejected
              - rejected
              - needsRevision
              - awaitingPayment
              - accepted
              - readyToDelivery
              - delivering
              - readyForPickup
              - received
              - closed
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""

  /users/orders/payment/{orderId}:
    get:
      tags:
        - payment
      summary: to get info about order's payments (only for owner user or ADMIN)
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            example: 898
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      payments:
                        type: array
                        items:
                          properties:
                            id:
                              type: integer
                              example: 5
                            paid:
                              type: integer
                              example: 0
                            method:
                              type: string
                              enum:
                                - cash
                                - kaspi
                            price:
                              type: integer
                              example: 4500
                            createdAt:
                              type: string
                              example: 2023-10-19 10:23:54+03
  /users/orders/payment/{paymentId}:
    patch:
      tags:
        - payment
      summary: update payment info (for deliveryman (maybe ADMIN?) or higher)
      parameters:
        - name: paymentId
          in: path
          required: true
          schema:
            type: integer
            example: 56
        - name: paid
          in: query
          required: true
          schema:
            type: integer
            example: 1000
        - name: method
          in: query
          required: true
          schema:
            type: string
            enum:
              - cash
              - kaspi
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /users/subscriptions:
    get:
      tags:
        - subscriptions
      summary: get all subs for self user
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            example: 15
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 2
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      count:
                        type: integer
                        example: 89
                      rows:
                        type: array
                        items:
                          properties:
                            id:
                              type: integer
                              example: 5
                            item:
                              $ref: '#/components/schemas/ItemMini'
    post:
      tags:
        - subscriptions
      summary: add {itemId} to subs
      parameters:
        - name: itemId
          in: query
          required: true
          schema:
            type: integer
            example: 459
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /users/subscriptions/{subscriptionId}:
    delete:
      tags:
        - subscriptions
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            type: integer
            example: 89
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /users/notifications:
    get:
      tags:
        - notifications
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      notifications:
                        type: array
                        items:
                          $ref: '#/components/schemas/Notification'
  /users/notifications/{userId}:
    post:
      tags:
        - admin
        - notifications
      summary: send notification to user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            example: 848
        - name: title
          in: query
          required: true
          schema:
            type: string
            example: Hello
        - name: description
          in: query
          required: true
          schema:
            type: string
            example: It's me!!!
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /users/notifications/{notificationId}:
    patch:
      tags:
        - notifications
      summary: patch is because this will change "isViewed" DB field) to open notification body
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: integer
            example: 56
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    $ref: '#/components/schemas/Notification'
    delete:
      tags:
        - admin
        - notifications
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: integer
            example: 789
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /categories/{categoryId}:
    parameters:
      - name: categoryId
        in: path
        required: true
        schema:
          type: integer
          example: 0
    post:
      tags:
        - categories
      summary: create category with parent id equals to{categoryId}, 0 - root category
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
            example: name
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
    get:
      tags:
        - categories
      summary: get all categories with {categoryId} parent id
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      categories:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
    patch:
      tags:
        - categories
      summary: edit name
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
            example: new name
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /categories/route/{categoryId}:
    get:
      tags:
        - categories
      summary: get category route
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
            example: 547
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      rote:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
  /items:
    get:
      tags:
        - items
      summary: get all items
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: categoryId
          in: query
          required: false
          schema:
            type: integer
        - name: stock
          in: query
          required: false
          description: false - for all, true - for only in stock
          schema:
            type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        example: 852
                      name:
                        type: string
                        example: Молток
                      description:
                        type: string
                        example: Качественный, крепкий, удобный очень
                      price:
                        type: integer
                        example: 3000
                      is_in_stock:
                        type: boolean
                        example: true
                      category_id:
                        type: integer
                        format: int64
                        example: 58
                      categoryName:
                        type: string
                        example: Категория
                      image:
                        type: string
                        example: pic.jpg


  /items/{itemId}:
    parameters:
      - name: itemId
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - items
      summary: get one item
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    $ref: '#/components/schemas/Item'
    delete:
      tags:
        - admin
        - items
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
    patch:
      tags:
        - admin
        - items
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
            example: Новое имя
        - name: description
          in: query
          required: false
          schema:
            type: string
            example: Новое описание
        - name: price
          in: query
          required: false
          schema:
            type: integer
            example: 2500
        - name: categoryId
          in: query
          required: false
          schema:
            type: integer
            example: 0
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
    post:
      tags:
        - admin
        - items
      summary: for ADMIN, only for main info, another field will be filled by another requests
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
            example: Новое имя
        - name: description
          in: query
          required: true
          schema:
            type: string
            example: Новое описание
        - name: price
          in: query
          required: true
          schema:
            type: integer
            example: 2500
        - name: categoryId
          in: query
          required: true
          schema:
            type: integer
            example: 0
        - name: images
          in: query
          required: false
          schema:
            type: array
            items:
              properties:
                image:
                  type: string
                  example: image.jpg

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 123
  /items/stock/{itemId}:
    parameters:
      - name: itemId
        in: path
        required: true
        schema:
          type: integer
          example: 56
    put:
      tags:
        - items
      summary: creates stock in some {storeId} or changes stock if relation exists
      parameters:
        - name: storeId
          in: query
          required: true
          schema:
            type: integer
            example: 524
        - name: inStockNumber
          in: query
          required: true
          schema:
            type: integer
            example: 5
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /items/infos/{itemId}:
    parameters:
      - name: itemId
        in: path
        required: true
        schema:
          type: integer
          example: 65
    post:
      tags:
        - items
      summary: add array of characteristics
      parameters:
        - name: info
          in: query
          required: true
          schema:
            type: array
            items:
              properties:
                name:
                  type: string
                  example: name
                description:
                  type: string
                  example: description
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
    delete:
      tags:
        - items
      summary: delete infos with ids in array (array provided in body)
      parameters:
        - name: info
          in: query
          required: true
          schema:
            type: array
            items:
              properties:
                id:
                  type: integer
                  example: 56
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
    patch:
      tags:
        - items
      summary: array with new data and ids which will be changed
      parameters:
        - name: info
          in: query
          required: true
          schema:
            type: array
            items:
              properties:
                id:
                  type: integer
                  example: 56
                name:
                  type: string
                  example: name
                description:
                  type: string
                  example: description
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /items/images/{itemId}:
    parameters:
      - name: itemId
        in: path
        required: true
        schema:
          type: integer
          example: 78
    post:
      tags:
        - items
      summary: to add images to item
      parameters:
        - name: images
          in: query
          required: true
          schema:
            type: array
            items:
              type: object
              properties:
                image:
                  type: string
                  example: h.jpg
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
    delete:
      tags:
        - items
      summary: deletes images with certain ids
      parameters:
        - name: images
          in: query
          required: true
          schema:
            type: array
            items:
              properties:
                id:
                  type: integer
                  example: 5
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
  /stores:
    get:
      tags:
        - stores
      summary: to get all stores
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: array
                    items:
                      properties:
                        id:
                          type: integer
                          example: 56
                        name:
                          type: string
                          example: name
                        address:
                          type: string
                          example: address
                        latitude:
                          type: string
                          example: 123.32131
                        longitude:
                          type: string
                          example: 123.32131
                        workingHoursStart:
                          type: string
                          example: 8:00
                        workingHoursEnd:
                          type: string
                          example: 20:00
    post:
      tags:
        - stores
      summary: creates new store and finds it's coordinates according to the address
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
            example: name
        - name: address
          in: query
          required: true
          schema:
            type: string
            example: name
        - name: workingHoursStart
          in: query
          required: true
          schema:
            type: string
            example: 8:00
        - name: workingHoursEnd
          in: query
          required: true
          schema:
            type: string
            example: 20:00
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 65
  /stores/{storeId}:
    parameters:
      - name: storeId
        in: path
        required: true
        schema:
          type: integer
          example: 56
    patch:
      tags:
        - stores
      summary: updates latLon if address changes
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
            example: name
        - name: address
          in: query
          required: false
          schema:
            type: string
            example: name
        - name: workingHoursStart
          in: query
          required: false
          schema:
            type: string
            example: 8:00
        - name: workingHoursEnd
          in: query
          required: false
          schema:
            type: string
            example: 20:00
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
    delete:
      tags:
        - stores
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: string
                    example: ""
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 848
        fullName:
          type: string
          example: Вадимов Вадим Вадимович
        email:
          type: string
          example: vadim@mail.ru
        phone_number:
          type: string
          example: +79856523652
        identificationNumber:
          type: string
          example: 3256328745698
        isConfirmed:
          type: boolean
          example: true
        role:
          type: string
          example: user
          enum:
            - user
            - deliveryman
            - moderator
            - admin
        createdAt:
          type: string
          format: date-time
          example: 2023-10-19 10:23:54+03

    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 526
        status:
          type: string
          example: delivering
          enum:
            - pendingConfirmation
            - cancelled
            - needsRevision
            - awaitingPayment
            - accepted
            - readyToDelivery
            - delivering
            - readyForPickup
            - received
            - closed
        totalPrice:
          type: integer
          example: 5000
        rentalPeriodStart:
          type: string
          format: date-time
          example: 2023-10-19
        rentalPeriodEnd:
          type: string
          format: date-time
          example: 2023-11-04
        address:
          type: string
          example: ул. Пушкина д. 7 кв. 587
        latitude:
          type: string
          example: 55.042779
        longitude:
          type: string
          example: 82.994966
        company_name:
          type: string
          example: Строим с радостью
        created_at:
          type: string
          format: date-time
          example: 2023-10-19 10:00:00+03
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemMini'

    ItemMini:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Молоток
        price:
          type: integer
          example: 5000
        count:
          type: integer
          example: 4
        image:
          type: string

    Delivery:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 523
        time_start:
          type: string
          format: date-time
          example: 2023-10-19 10:00:00+03
        time_end:
          type: string
          format: date-time
          example: 2023-10-19 12:00:00+03
        method:
          type: string
          example: car
        order:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 526
            status:
              type: string
              example: delivering
              enum:
                - pendingConfirmation
                - pendingRejected
                - rejected
                - needsRevision
                - awaitingPayment
                - accepted
                - readyToDelivery
                - delivering
                - readyForPickup
                - received
                - closed
            total_price:
              type: integer
              example: 5000
            address:
              type: string
              example: ул. Пушкина д. 7 кв. 587
            latitude:
              type: string
              example: 55.042779
            longitude:
              type: string
              example: 82.994966

    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 85
        name:
          type: string
          example: Категория
        parent_id:
          type: integer
          format: int64
          example: 52

    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 852
        name:
          type: string
          example: Молток
        description:
          type: string
          example: Качественный, крепкий, удобный очень
        price:
          type: integer
          example: 3000
        is_in_stock:
          type: boolean
          example: true
        category_id:
          type: integer
          format: int64
          example: 58
        categoryName:
          type: string
          example: Категория
        info:
          type: array
          items:
            $ref: '#/components/schemas/Info'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ItemImage'
        itemStores:
          type: array
          items:
            $ref: '#/components/schemas/ItemStock'

    ItemStock:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 259
        inStockNumber:
          type: integer
          example: 5
        name:
          type: string
          example: Склад ПроКат №1
        address:
          type: string
          example: ул. Хорошая, д. 12
        workingHoursStart:
          type: string
          example: 8:00
        workingHoursEnd:
          type: string
          example: 20:00


    ItemImage:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 248
        image:
          type: string
          example: tool.jpg

    Info:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 785
        name:
          type: string
          example: Вес
        description:
          type: string
          example: 12 кг

    Notification:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 536
        title:
          type: string
          example: Новое сообщение
        description:
          type: string
          example: Заходите скорее почитайте
        isViewed:
          type: boolean
          example: true
        created_at:
          format: date-time
          example: 2023-10-19 12:00:00+03